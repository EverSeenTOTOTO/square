[let gen /[yield]
    [begin
        [let i 0]
        [while [< i 10]
            [begin
                [+= i 1]
                [callcc /[iter_k]
                    [yield [vec i iter_k]]]]]]]

[let [i iter_k] [vec nil nil]]

[let next /[g]
    [if [== [typeof iter_k] 'fn']
        [iter_k]
        [begin
            [let p [callcc /[yield] [g yield]]]
            [if [== [typeof p] 'vec']
                [begin
                    [= [i iter_k] p]
                    [println i]]]]]]

[next gen]
[next gen]
[next gen]
[next gen]
[next gen]
