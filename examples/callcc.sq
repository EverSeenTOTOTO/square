[let gen /[yield]
    [begin
        [let i 0]
        [while [< i 10]
            [callcc /[cc]
                [yield [vec i cc]]]]]]

[let innerCc nil]

[let next /[g]
    [if [== [typeof innerCc] 'fn']
        [innerCc]
        [begin
            [let p [callcc /[cc] [g cc]]]
            [if [== [typeof p] 'vec']
                [begin
                    [let i nil]
                    [= [i innerCc] p]
                    [print i]]]]]]
                    
[next gen]
[next gen]
[next gen]
[next gen]
[next gen]

